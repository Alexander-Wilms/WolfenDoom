int messagestart; // Used to track layer of hud messages that we should be OK to start on

// Calculate time (in tics, 1/35 of a second) to display the message on-screen,
// hopefully giving players enough time to read it, whilst not displaying it
// for too long. "message" is the identifier of a LANGUAGE entry.
function int GetMessageTime(int message)
{
	int extraTime = 70; // 2 extra seconds
	int perWordTime = 6; // Tics per word
	int longWordPerCharTics = 2; // Tics to add per char in a long word
	str string = StrParam(l: message);
	int length = StrLen(string);
	int spaces = 0; // Number of spaces. Add 1 to get word count, multiply by perWordTime and add longWordTime and extraTime to get estimated reading time.
	int longWordTime = 0; // Extra time to add for long words (7 or more letters)
	int consecutiveChars = 0; // Consecutive letters
	for (int i = 0; i < length; i++)
	{
		int strchar = GetChar(string, i);
		// Found a space. 
		if (strchar == ' ')
		{
			spaces += 1;
			if (consecutiveChars >= 7)
			{
				longWordTime += longWordPerCharTics * consecutiveChars;
			}
			consecutiveChars = 0;
		}
		else
		{
			consecutiveChars += 1;
		}
	}
	int totalTime = (spaces + 1) * perWordTime + longWordTime + extraTime;
	return totalTime;
}

function int GetMessageStart (void)
{
	messagestart -= 4;
	if (messagestart < 0) { messagestart = 64; } // Allow overlapping messages that don't interfere with each other.  This lets 16 dialogue messages play at once, seamlessly.

	return messagestart;
}

script "BoADialogue"(int headtalky,int headsilent,int message)
{
	int messagelayer = GetMessageStart();
	int basemessagetime = GetMessageTime(message);
	int talktime = basemessagetime * 3 / 4;
	int resttime = basemessagetime - talktime;

	// Fade in HUD BGs
	GiveInventory("IncomingMessage", 1);
	SetHudSize(320, 200, true);
	SetFont("HEADBAR");
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 4, CR_UNTRANSLATED, 160.0, 24.0, 999.0, 1.0, 1.0);
	SetFont("HEADBOVL"); //mxd. Frame overlay
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 1, CR_UNTRANSLATED, 160.0, 24.0, 999.0, 1.0, 1.0); //mxd

	// Fade in the portrait
	SetFont(headsilent);
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 999.0, 1.0, 1.0);

	// Start talk animation
	Delay(35);
	SetFont(headtalky);
	hudmessagebold(s:"A"; HUDMSG_PLAIN, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0);

	// Play the audio (if it's there)
	PlayMessageSound(0, message);

	str msg = ScriptCall("ACSTools", "BreakString", message, 540);

	// Show message
	AmbientSound("RADIONOS",127);
	SetHudSize(640, 400, 1);
	SetFont("SMALLFONT");
	hudmessagebold(s:msg; HUDMSG_TYPEON | HUDMSG_LOG, messagelayer + 2, CR_GRAY, 100.1, 4.1, 999.0, 0.03, 1.0);

	// Stop talk animation
	delay(talktime);
	SetHudSize(320, 200, true);
	SetFont(headsilent);
	hudmessagebold(s:"A"; HUDMSG_PLAIN, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0);

	delay(resttime);

	// Fade out the portrait
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0, 0.0, 1.0);

	//Fade out HUD BGs
	SetHudSize(320, 200, true);
	SetFont("HEADBAR");
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 4, CR_UNTRANSLATED, 160.0, 24.0, 0.0, 0.0, 1.0);
	SetFont("HEADBOVL"); //mxd. Frame overlay
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 1, CR_UNTRANSLATED, 160.0, 24.0, 0.0, 0.0, 1.0); //mxd

	//Fade out the message
	SetHudSize(640, 400, 1);
	SetFont("SMALLFONT");
	hudmessagebold(s:msg; HUDMSG_FADEINOUT, messagelayer + 2, CR_GRAY, 100.1, 4.1, 0.0, 0.0, 1.0);
	TakeInventory("IncomingMessage", 1);
}

int devcommentqueue = 0;

script "BoADevComment" (int langEntry)
{
	int queuelength = devcommentqueue; // Script-local copy of devcommentqueue
	int image = 0;
	// Print(s:"queuelength ", d:queuelength);
	if (GetCvar("boa_devcomswitch")) {
		// Get image to show on the comment, if any. The pipe character is used
		// to separate the entry ID from the image name.
		int index = 0;
		int length = StrLen(langEntry);
		while (index < length)
		{
			int char = GetChar(langEntry, index);
			if (char == '|')
			{
				image = StrMid(langEntry, index + 1, length - index - 1);
				langEntry = StrLeft(langEntry, index);
				break;
			}
			index++;
		}
		// Get time to show message on screen
		int basemessagetime = GetMessageTime(langEntry);
		// 20 tics is a little more than half a second. Add this to
		// devcommentqueue twice to give messages time to fade in and out.
		devcommentqueue += basemessagetime + 20 * 2;
		// Wait for previous dev comment to disappear
		if (queuelength)
		{
			delay(queuelength);
		}
		// Show new dev comment
		ACS_NamedExecuteAlways("_Do_BoADevComment_", 0, langEntry, basemessagetime, image);
		// Use ACS_NamedExecute here so that only one instance of this script
		// can run at any given time.
		ACS_NamedExecute("_Tick_BoADevComment_", 0);
	}
}

script "_Tick_BoADevComment_" (void)
{
	// Tick down timer for developer comment queue
	while (devcommentqueue)
	{
		devcommentqueue -= 1;
		delay(1);
	}
}

script "_Do_BoADevComment_" (int langEntry, int basemessagetime, int image)
{
	// Position
	int devcx = 50.1;
	int devcy = 400.1;

	// Offsets for image and text
	int imageyoffset = 23.0;
	int textxoffset = 0; // Offset text to the right to make space for image
	int textxoffsetf = 0; // Same, but in fixed point

	if (image > 0)
	{ // Image is assumed to be a string
		textxoffset = ScriptCall("ACSTools", "GetTextureWidth", image);
		textxoffsetf = textxoffset << 16;
	}

	// Border relative position
	int borderx = devcx - 12.0;
	int bordery = devcy - 12.0;

	// Set up size
	SetHudSize(800, 600, TRUE);

	// Display background
	SetFont("DEVCBACK");
	HudMessage(s:"A"; HUDMSG_FADEINOUT, 2002, CR_UNTRANSLATED, borderx, bordery, ((basemessagetime + 18) * 1872) - (32768), 0.5, 0.5, 1.0);

	// Display image
	if (image > 0)
	{
		SetFont(image);
		// BTW, the ID also works like z-index, but in reverse.
		HudMessage(s:"A"; HUDMSG_FADEINOUT, 2001, CR_UNTRANSLATED, devcx, devcy + imageyoffset, ((basemessagetime + 18) * 1872) - (32768), 0.5, 0.5, 1.0);
	}

	// Display message
	Delay(18);
	SetFont("SMALLFONT");
	SetHudWrapWidth(720 - textxoffset);
	HudMessage(l:langEntry; HUDMSG_TYPEON, 2000, CR_UNTRANSLATED, devcx + textxoffsetf, devcy, 999.0, 0.02, 2.0, 1.0);

	// Wait for 25 seconds and fade out message
	Delay(basemessagetime);
	HudMessage(l:langEntry; HUDMSG_FADEOUT, 2000, CR_UNTRANSLATED, devcx + textxoffsetf, devcy, 0.0, 0.5, 1.0);
}

script "HintMessage" (int message, int key)
{
	if (message == "" && key == "") { Terminate; }

	message = StrParam(l:message);
	message = ScriptCall("ACSTools", "BreakString", message, 300);
	if (key && StrLen(key) > 0) key = ScriptCall("ACSTools", "GetKeyPressString", key, true, "Dark Gray", "Gray");

	SetHudSize(640, 480, false);
	int screenblocks = GetCVar("screenblocks");

	int drawpos = 464.0;

	// Offset the message upward as needed if we are not in a cutscene
	if (!CheckActorInventory(1001, "CutsceneEnabled")) // Just check player 1 for efficiency
	{
		if (screenblocks < 11)
		{
			drawpos -= 10.0;
			if (ScriptCall("Base", "SneakableActors") > 0) { drawpos -= 5.0; } // Offset for sneak bar in status bar view
		}
		else if (screenblocks == 11 && ScriptCall("Base", "SneakableActors") > 0) { drawpos -= 30.0; } // Offset for sneak bar in fullscreen
	}

	drawpos -= CountLineBreaks(message) * 11.0;

	if (StrLen(key) > 0) { message = StrParam(s:message, s:"\n", s:key); }

	hudmessagebold(s:message; HUDMSG_FADEINOUT | HUDMSG_LOG, 80, CR_GRAY, 320.4, drawpos, 3.0, 1.0, 1.0);

	delay(10);
	AmbientSound("menu/change", 96);
}

function int CountLineBreaks(str input)
{
	int count = 0;

	for (int c = 0; c < StrLen(input); c++)
	{
		int char = GetChar(input, c);
		if (char == 0x0A) { count++; }
	}

	return count;
}

script "TankExitMessage" (void)
{
	ACS_NamedExecute("HintMessage", 0, "TANKEXITHOLD", "+use");
}

script "FollowerMessage" (int type, int count)
{
	int messagelayer = GetMessageStart();
	int messagetype = "";
	int message = "";
	int messagestr = "";

	switch (type)
	{
		case 0:
			messagetype = StrParam(s:"STAY", i:count);
		break;
		case 1:
			messagetype = StrParam(s:"STATIC", i:count);
		break;
		case 2:
			messagetype = StrParam(s:"COME", i:count);
		break;
		case 3:
			messagetype = StrParam(s:"ALWAYS", i:count);
		break;
		default:
			messagetype = "";
		break;
	}

	// Try to get the message string, prepending the actor's class name
	message = StrParam(s:GetActorClass(0), l:messagetype);
	messagestr = StrParam(l:message);
	if (messagestr == message)
	{
		if (GetCVar("boa_debugvoiceovers")) { Log(s:"\cgMissing voiceover: \cjCheck SNDINFO entry and audio file for \cf", s:message, s:"\cj! Falling back to \cf", s:StrParam(s:"FOLLOWER", l:messagetype), s:"\cj."); }
		// If not found, fall back to the generic messages
		message = StrParam(s:"FOLLOWER", l:messagetype);
		messagestr = StrParam(l:message);
		if (messagestr == message) { Terminate; }
	}

	str head = GetUserVariable(0, "head");
	if (head == "") { Terminate; }

	// Quick message display...  Variant of the BoADialogue script...

	str headsilent = StrParam(s:head, i:0);
	str headtalky = StrParam(s:head, i:1);

	// Fade in HUD BGs
	GiveInventory("IncomingMessage", 1);
	SetHudSize(320, 200, true);
	SetFont("HEADBAR");
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 4, CR_UNTRANSLATED, 160.0, 24.0, 999.0, 1.0, 0.5);
	SetFont("HEADBOVL"); //mxd. Frame overlay
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 1, CR_UNTRANSLATED, 160.0, 24.0, 999.0, 1.0, 0.5); //mxd

	// Fade in the portrait
	SetFont(headsilent);
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 999.0, 1.0, 0.5);

	// Start talk animation
	Delay(35);
	SetFont(headtalky);
	hudmessagebold(s:"A"; HUDMSG_PLAIN, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0);

	// Play the audio (if it's there)
	PlayMessageSound(0, message);

	str msg = ScriptCall("ACSTools", "BreakString", messagestr, 540);

	// Show message
	AmbientSound("RADIONOS",127);
	SetHudSize(640, 400, 1);
	SetFont("SMALLFONT");
	hudmessagebold(s:msg; HUDMSG_TYPEON | HUDMSG_LOG, messagelayer + 2, CR_GRAY, 100.1, 4.1, 999.0, 0.03, 0.5);

	// Stop talk animation
	delay(2*35);
	SetHudSize(320, 200, true);
	SetFont(headsilent);
	hudmessagebold(s:"A"; HUDMSG_PLAIN, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0);

	// Fade out the portrait
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0, 0.0, 0.5);

	//Fade out HUD BGs
	SetHudSize(320, 200, true);
	SetFont("HEADBAR");
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 4, CR_UNTRANSLATED, 160.0, 24.0, 0.0, 0.0, 0.5);
	SetFont("HEADBOVL"); //mxd. Frame overlay
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 1, CR_UNTRANSLATED, 160.0, 24.0, 0.0, 0.0, 0.5); //mxd

	//Fade out the message
	SetHudSize(640, 400, 1);
	SetFont("SMALLFONT");
	hudmessagebold(s:msg; HUDMSG_FADEINOUT, messagelayer + 2, CR_GRAY, 100.1, 4.1, 0.0, 0.0, 0.5);
	TakeInventory("IncomingMessage", 1);
}

script "SpyMessage" (int count, int item)
{
	int messagelayer = GetMessageStart();
	int messagetype = "";
	int message = "";
	int messagestr = "";

	if (count < 0)
	{
		// If the actor's user_spymsgindex variable is set, use the corresponding LANGUAGE
		// entry that's formatted as "SPYMESSAGE[MAPNAME][user_spymsgindex value]
		// e.g.: SPYMESSAGEC1M11 for a spy in C1M1 with a variable set to 1.
		message = StrParam(s:"SPYMESSAGE", n:PRINTNAME_LEVEL, d:-count);
		messagestr = StrParam(l:message);
	}

	if (messagestr == message)
	{
		switch (count)
		{
			case 0:
				messagetype = StrParam(s:"GENERIC", i:Random(0, 4));
				break;
			case 1:
				messagetype = StrParam(s:"AMMO");
				break;
			case 2:
				messagetype = StrParam(s:"BANDAGES");
				break;
			case 3:
				messagetype = StrParam(s:"GOLD");
				break;
			default:
				messagetype = StrParam(s:"MOVE", i:Random(0, 1));
				break;
		}

		message = StrParam(s:"SPYMESSAGE", s:messagetype);
		messagestr = StrParam(l:message);

		if (messagestr == message) { Terminate; }

		if (count == 0 && item) { messagestr = StrParam(s:messagestr, s:"\n", l:"SPYMESSAGETAKETHIS"); }
		else if (count > 0 && count < 4) { messagestr = StrParam(l:StrParam(s:"SPYMESSAGEGENERIC", i:Random(0, 4)), s:"\n", s:messagestr); }
	}

	str head = GetUserVariable(0, "head");
	if (head == "") { Terminate; }

	// Quick message display...  Variant of the BoADialogue script...

	str headsilent = StrParam(s:head, i:0);
	str headtalky = headsilent;

	// Fade in HUD BGs
	GiveInventory("IncomingMessage", 1);
	SetHudSize(320, 200, true);
	SetFont("HEADBAR");
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 4, CR_UNTRANSLATED, 160.0, 24.0, 999.0, 1.0, 0.5);
	SetFont("HEADBOVL"); //mxd. Frame overlay
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 1, CR_UNTRANSLATED, 160.0, 24.0, 999.0, 1.0, 0.5); //mxd

	// Fade in the portrait
	SetFont(headsilent);
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 999.0, 1.0, 0.5);

	// Start talk animation
	Delay(35);
	SetFont(headtalky);
	hudmessagebold(s:"A"; HUDMSG_PLAIN, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0);

	// Play the audio (if it's there)
	PlayMessageSound(0, message);

	str msg = ScriptCall("ACSTools", "BreakString", messagestr, 540);

	// Show message
	AmbientSound("RADIONOS",127);
	SetHudSize(640, 400, 1);
	SetFont("SMALLFONT");
	hudmessagebold(s:msg; HUDMSG_TYPEON | HUDMSG_LOG, messagelayer + 2, CR_GRAY, 100.1, 4.1, 999.0, 0.03, 0.5);

	// Stop talk animation
	delay(2*35);

	if (count < 0) { delay(3*35); } // Take longer for initial conversation if it's not generic

	SetHudSize(320, 200, true);
	SetFont(headsilent);
	hudmessagebold(s:"A"; HUDMSG_PLAIN, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0);

	if (count < 0) { delay(5*35); } // Take longer for initial conversation if it's not generic
	else { delay(2 * 35); }

	// Fade out the portrait
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 3, CR_UNTRANSLATED, 21.0, 16.0, 0.0, 0.0, 0.5);

	//Fade out HUD BGs
	SetHudSize(320, 200, true);
	SetFont("HEADBAR");
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 4, CR_UNTRANSLATED, 160.0, 24.0, 0.0, 0.0, 0.5);
	SetFont("HEADBOVL"); //mxd. Frame overlay
	hudmessagebold(s:"A"; HUDMSG_FADEINOUT, messagelayer + 1, CR_UNTRANSLATED, 160.0, 24.0, 0.0, 0.0, 0.5); //mxd

	//Fade out the message
	SetHudSize(640, 400, 1);
	SetFont("SMALLFONT");
	hudmessagebold(s:msg; HUDMSG_FADEINOUT, messagelayer + 2, CR_GRAY, 100.1, 4.1, 0.0, 0.0, 0.5);
	TakeInventory("IncomingMessage", 1);
}

script "ShowStats" (void)
{
	ScriptCall("MapStatsHandler", "Toggle");
}

script "KeenPogoMessage" (int message)
{
	ScriptCall("ClassicMessageBox", "PrintMessage", "$KEENPOGO", 2, "KEENPOGO", 0, -1, 26, 6);
}