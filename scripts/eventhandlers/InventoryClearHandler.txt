/*
 * Copyright (c) 2018-2020 EdTheBat, AFADoomer
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
**/

class InventoryClearHandler : EventHandler
{
	override void PlayerEntered(PlayerEvent e)
	{
		let me = PlayerPawn(players[e.PlayerNumber].mo);
		// Give the player the camera tilt handling item (modified version of Nash's Tilt++ v1.3)
		me.A_GiveInventory("BoATilt", 1);
		me.A_GiveInventory("BoAVisibility", 1);
		me.A_GiveInventory("BoAUnderwater", 1);

		// Force reset of certain shader effects
		me.A_SetInventory("OldVideoShaderControl", 1);
		me.A_SetInventory("BlurShaderControl", 1);
		me.A_SetInventory("HeatShaderControl", 1);
		me.A_SetInventory("SandShaderControl", 1);

		me.A_GiveInventory("NullWeapon", 1);

		// Remove level-specific inventory items
		static const class<Inventory> itemTypes[] = {
			"CKPogoStick",
			"CKLedgeGrab",
			"TextPaperCollectible",
			"TextPaperSecretHint"
		};
		for (int i = 0; i < 4; i++)
		{
			let invitem = me.FindInventory(invclass);
			if (invitem)
			{
				me.RemoveInventory(invitem);
			}
		}

		// Ed the Bat's updated weapon stripping
		if(level.levelnum!=99)
			return;
		DropItem drop=me.GetDropItems();
		
		for(int i=0;i<AllActorClasses.Size();i++)
		{
			let type=AllActorClasses[i];
			// First, remove all weapons, except those with the UNDROPPABLE flag
			if(type is "Weapon")
			{
				let weptype=(class<weapon>)(type);
				let wepitem=weapon(me.FindInventory(weptype));
				if(wepitem!=null&&!wepitem.bUNDROPPABLE)
					me.A_TakeInventory(name(weptype));
			}
			// Remove all ammo, except that with the UNDROPPABLE flag
			if(type is "Ammo")
			{
				let ammotype=(class<ammo>)(type);
				let ammoitem=ammo(me.FindInventory(ammotype));
				if(ammoitem!=null&&!ammoitem.bUNDROPPABLE)
					me.A_TakeInventory(name(ammotype));
			}
		}
		//If the player has any weapons in StartItem, set them here
		//They're not supposed to come with ammo, so clear that after this
		if(drop!=null)
		{
			for(DropItem di=drop;di!=null;di=di.Next)
			{
				if(di.Name=='None')
					continue;
				let weptype=(class<weapon>)(di.Name);
				if(weptype!=null)
					me.A_SetInventory(di.Name,di.Amount);
			}
		}
		//If the player has any ammo in StartItem, set it here
		if(drop!=null)
		{
			for(DropItem di=drop;di!=null;di=di.Next)
			{
				if(di.Name=='None')
					continue;
				let ammotype=(class<ammo>)(di.Name);
				if(ammotype!=null)
					me.A_SetInventory(di.Name,di.Amount);
			}
		}
	}
}