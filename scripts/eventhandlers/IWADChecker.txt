class IWADChecker : EventHandler
{
	// Check if BoA is being loaded as a PWAD, and display the IWADNotice if it
	// is.
	clearscope void CheckIWAD()
	{
		if (Wads.FindLump("MAP01", 0) > 0 || Wads.FindLump("E1M1", 0) > 0) //filters Doom IWADS
		{
			Menu.SetMenu("IWADNotice");
		}
	}

	override void NewGame()
	{
		CheckIWAD();
	}
}

class IWADNotice : BoAMenu
{
	bool printed;
	override void Drawer()
	{
		String title = StringTable.Localize("IWADNOTICE1", false);
		String text = StringTable.Localize("IWADNOTICE2", false);
		if (!printed)
		{
			Console.Printf(title);
			Console.Printf(text);
			printed = true;
		}
		TextureID tex = TexMan.CheckForTexture("CONBACK", TexMan.Type_MiscPatch);
		if (tex) { screen.DrawTexture (tex, false, 0, 0, DTA_Fullscreen, true, DTA_Alpha, 1.0); }
		// Display IWADNOTICE1 on one line, center justified, in BigFont
		screen.DrawText(BigFont, Font.CR_GRAY,
			Screen.GetWidth() / 2 - BigFont.StringWidth(title) * CleanXfac / 2,
			Screen.GetHeight() / 2 - BigFont.GetHeight() * CleanYfac / 2,
			title, DTA_CleanNoMove, true);
		// Display IWADNOTICE2 on multiple lines, center justified, in SmallFont
		int widthChar = "a".ByteAt(0);
		BrokenLines textLines = SmallFont.BreakLines(text, SmallFont.GetCharWidth(widthChar) * 50);
		for (int line = 0; line < textLines.Count(); line++)
		{
			double yadd = SmallFont.GetHeight() * (line + 1);
			screen.DrawText (SmallFont, Font.CR_GRAY,
				Screen.GetWidth() / 2 - textLines.StringWidth(line) * CleanXfac / 2,
				Screen.GetHeight() / 2 + yadd * CleanYfac,
				textLines.StringAt(line), DTA_CleanNoMove, true);
		}
	}

	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		if (mkey == MKEY_Enter)
		{
			MenuSound("menu/choose");
			Close();
			return true;
		}
		else return Super.MenuEvent(mkey, fromcontroller);
	}

	override bool MouseEvent(int type, int x, int y)
	{
		if (type == MOUSE_Click)
		{
			return MenuEvent(MKEY_Enter, true);
		}
		return false;
	}

}

