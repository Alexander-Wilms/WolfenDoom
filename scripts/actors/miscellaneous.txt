class InvisibleBridgeBlocking : InvisibleBridge replaces InvisibleBridge
{
	Default
	{
		+DONTTHRUST
		+NOBLOOD
		+NODAMAGE
		+NOTAUTOAIMED
		+SHOOTABLE
	}
}

class ModelOpelTruckWindows : Actor
{
	Default
	{
		+NOINTERACTION
		Height 56;
		DistanceCheck "scenelod";	
		RenderStyle "Shaded";
		StencilColor "CC CC CC";
	}

	States
	{
		Spawn:
			MDLA A -1;
			Stop;
	}

	override void BeginPlay()
	{
		// STATNUM values set the order in which an actor is Ticked by the game loop.
		//  This change causes this actor to Tick *after* the pathfollower moves and
		//  the rail script has adjusted the truck model, instead of before the
		//  script runs, as would be the default behavior.
		ChangeStatNum(STAT_SCRIPTS + 1);
	}

	override void Tick()
	{
		if (master)
		{
			A_Warp(AAPTR_MASTER, flags:WARPF_COPYPITCH | WARPF_COPYINTERPOLATION | WARPF_NOCHECKPOSITION);
		}
		Super.Tick();
	}
}

class CrankModel : Actor
{
	int init, amt;

	Default
	{
		+NOGRAVITY
		Height 0;
		Radius 0;
	}

	States
	{
		Spawn:
			MDLA A 35;
		SpawnLoop:
			MDLA B 1 A_DoCrank();
			Loop;
	}

	void A_DoCrank()
	{
		if (!init) { init = amt; }
		roll = amt - init;
	}
}

class FlattenableProp : Actor // Tall grass/rye, etc. that can be trampled down
{
	int touchtime;
	int fallpitch;

	Default
	{
		+NOBLOOD
		+NODAMAGE
		+NOTAUTOAIMED
		+SHOOTABLE
		+SOLID
		+SPECIAL
	}

	override void PostBeginPlay()
	{
		A_SetSize(Radius, 1);

		Super.PostBeginPlay();
	}

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		Touch(inflictor);

		return 0; // No actual damage to the actor
	}

	override void Touch(Actor toucher)
	{
		if (!toucher) { return; }

		touchtime++;
		bFlatSprite = true;

		if (touchtime < 5) { angle = AngleTo(toucher) + 180; }
		if (!fallpitch) { fallpitch = Random(70, 85); }

		pitch = clamp(-fallpitch + touchtime * 15, -fallpitch, 0);

		if (pitch == -fallpitch)
		{
			bSpecial = false;
			bSolid = false;
			bShootable = false;
		}
	}
}

class ActorPositionable : Actor
{
	enum RotationFlags
	{
		ROT_MatchAngle = 1,
		ROT_MatchPitch = 2,
		ROT_MatchRoll = 4,
	};

	Vector3 spawnoffset;
	Vector3 offset;

	override void PostBeginPlay()
	{
		if (!master) { Destroy(); return; }

		spawnoffset = pos - master.pos;

		Vector2 temp = RotateVector((spawnoffset.x, spawnoffset.y), -master.angle);
		spawnoffset = (temp.x, temp.y, spawnoffset.z);

		Species = master.Species;

		Super.PostBeginPlay();
	}

	void RotateWithMaster(int flags = ROT_MatchAngle | ROT_MatchPitch | ROT_MatchRoll)
	{
		Vector2 temp;

		// Keep the actor in the correct position, regardless of pitch/roll of the master actor
		if (master)
		{
			if (spawnoffset != (0, 0, 0))
			{
				temp = RotateVector((spawnoffset.y, spawnoffset.z), master.roll);
				offset = (spawnoffset.x, temp.x, temp.y);

				temp = RotateVector((offset.x, offset.z), 360 - master.pitch);
				offset = (temp.x, offset.y, temp.y);

				temp = RotateVector((offset.x, offset.y), master.angle);
				offset = (temp.x, temp.y, offset.z);
			}

			SetOrigin(master.pos + offset, true);

			if (flags & ROT_MatchAngle) { angle = master.angle; }

			double delta = deltaangle(master.angle, angle);

			if (flags & ROT_MatchPitch) { pitch = master.roll * sin(-delta) + master.pitch * cos(delta); }
			if (flags & ROT_MatchRoll) { roll = master.roll * cos(-delta) + master.pitch * sin(delta); }
		}
	}

	override void Tick()
	{
		RotateWithMaster();

		Super.Tick();
	}
}

class EffectGiver : EffectSpawner
{
	bool Active;
	Array<Actor> Activators;
	class<ShaderControl> controlclass;

	Property Control:controlclass;

	Default
	{
		//$Category Special Effects (BoA)
		//$Color 12
		Radius 128;
		Scale 4.0;
		+FLATSPRITE
		+SPECIAL
		+NOCLIP
		RenderStyle "None";
	}

	States
	{
		Spawn:
			PAO1 A 0;
		Active:
			PAO1 A 35;
			Loop;
	}

	override void PostBeginPlay()
	{
		double fz = GetZAt(0, 0, 0, GZF_NO3DFLOOR);
		double cz = GetZAt(0, 0, 0, GZF_CEILING | GZF_NO3DFLOOR);

		SetOrigin((pos.xy, fz), false);

		A_SetSize((Radius + 8) * scale.x, cz - fz); // Resize to the scaled size, plus 32 units to allow for a border on the edges where the value will properly be zero, and fill the height of the sector.

		Active = !(SpawnFlags & MTF_DORMANT);

		Activators.Clear();

		Super.PostBeginPlay();
	}

	override void Touch(Actor toucher)
	{
		if (Activators.Find(toucher) == Activators.Size()) { Activators.Push(toucher); }
	}

	override void Tick()
	{
		if (Active && level.time % 5 == 0)
		{
			for (int i = 0; i < Activators.Size(); i++)
			{
				Actor mo = Activators[i];

				if (mo && mo is "PlayerPawn")
				{
					double r = Default.Radius * scale.x / Default.scale.x;

					int amt = clamp(int((128 / r) * (r - Distance2D(mo) + mo.Radius)), 0, 128); // Always scale from 0 to 128, regardless of scale/radius of actor

					ShaderControl control = ShaderControl(mo.FindInventory(controlclass));
					if (control)
					{
						if (amt - 5 >= control.amount) { SetParams(control); }
						amt = max(amt, control.amount); // Don't cancel out other givers
					}

					mo.SetInventory(controlclass, 1 + amt);

					if (amt <= 1) { Activators.Delete(i); }
				}
			}
		}

		Super.Tick();
	}

	virtual void SetParams(ShaderControl control) {}

	override void Activate (Actor activator)
	{
		Active = true;
		Super.Activate(activator);
	}

	override void Deactivate (Actor activator)
	{
		Active = false;
		Super.Deactivate(activator);
	}
}

class HeatEffectGiver : EffectGiver
{
	Default
	{
		EffectGiver.Control "HeatShaderControl";
	}
}

class SandEffectGiver : EffectGiver
{
	Default
	{
		EffectGiver.Control "SandShaderControl";
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		scale *= 1.5;
	}

	override void SetParams(ShaderControl control)
	{
		SandShaderControl ctrl = SandShaderControl(control);

		if (!ctrl) { return; }

		double destangle = Normalize180(angle + 90);
		if (destangle - ctrl.setangle > 180) { destangle -= 360; }

		if (ctrl.setangle > destangle) { ctrl.setangle = max(destangle, ctrl.setangle - 5 * ctrl.speed); }
		else if (ctrl.setangle < destangle) { ctrl.setangle = min(destangle, ctrl.setangle + 5 * ctrl.speed); }
	}
}

class Tornado : Actor
{
	class<Actor> segment;
	int skinframe;
	class<Actor> lightning;
	class<Actor> dust;

	Property Segment:segment;
	Property SegmentSkin:skinframe;
	Property Lightning:lightning;
	Property Dust:dust;

	Default
	{
		//$Category Special Effects (BoA)
		//$Color 12
		+NOINTERACTION

		Scale 3.5;
		Speed 1.0;
		Alpha 1.0;

		Tornado.Segment "TornadoSegment";
		Tornado.SegmentSkin 0; // 0-4 uses the various waterfall textures as the model skin
		Tornado.Lightning "LightningBeamArc2";
		Tornado.Dust "ZyklonBCloud";
	}

	override void PostBeginPlay()
	{
		double factor = (ceilingz - floorz) / 896.;

		scale *= factor;

		Actor prev;
		double spawnscale = scale.x;
		double spawnspeed = speed;

		for (double i = ceilingz; i >= floorz; i -= 48 * factor)
		{
			Actor mo = Spawn(segment, (pos.xy, i));

			if (mo)
			{
				TornadoSegment(mo).destscale = spawnscale;
				TornadoSegment(mo).skinframe = skinframe;
				TornadoSegment(mo).dust = dust;
				TornadoSegment(mo).lightning = lightning;
				mo.bBright = bBright;
				mo.alpha = alpha;
				mo.speed = spawnspeed;
				mo.scale.y = factor;
				if (prev) { prev.master = mo; }

				prev = mo;
			}

			spawnscale *= 0.85;
			spawnspeed *= 1.2;
		}

		Destroy();
	}

	States
	{
		Spawn:
			TNT1 A 1;
			Loop;
	}
}

class TornadoSegment : Actor
{
	Vector3 offset;
	double destscale;
	int timeoffset;
	class<Actor> lightning;
	class<Actor> dust;
	int skinframe;

	Default
	{
		+NOINTERACTION
		+NOGRAVITY

		Renderstyle "Add";
		Scale 0.05;
	}

	States
	{
		Spawn:
			MDLA # 0;
			MDLA # 70;
		Disperse:
			MDLA # 5 {
				A_FadeOut(0.025);
				scale.x *= 1.0125;
			}
			Loop;
	}

	override void PostBeginPlay()
	{
		angle = Random(0, 359);
		timeoffset = Random(1, 360);
		frame = skinframe;
		SpawnPoint = pos;

		if (master)
		{
			offset = pos - master.pos;
		}

		A_StartSound("WIND_SILENT", CHAN_6, CHANF_LOOPING, 1.0, ATTN_NONE);

		Super.PostBeginPlay();
	}

	override void Tick()
	{
		if (isFrozen()) { return; }

		angle += speed;
		roll = 5 * sin((level.time + timeoffset) * 2) * scale.y;

		if (master)
		{
			if (scale.x < destscale)
			{
				scale.x = min(destscale, scale.x * 1.05);
				master.scale.x = scale.x * 0.85;

				master.alpha = min(alpha, scale.x / destscale);
			}

			Vector3 offsetalt = offset;

			offsetalt.x += 16 * scale.x * sin(level.time);
			offsetalt.y += 16 * scale.x * cos(level.time);
			SetOrigin(master.pos + offsetalt, true);
		}

		int radius = int(64 * scale.x);

		if (level && level.time && level.time % (timeoffset * 5) == 0)
		{
			if (dust)
			{
				Actor cloud = Spawn(dust, (SpawnPoint.xy + (Random(-radius, radius), Random(-radius, radius)), floorz));
				if (cloud) { cloud.scale *= FRandom(0.5, 1.2); }
			}

			if (lightning)
			{
				Actor l = Spawn(lightning, pos + (Random(-radius, radius), Random(-radius, radius), 0));
				if (l)
				{
					l.master = self;
					l.angle = Random(0, 359);
					l.pitch = Random(0, 359);
					LightningBeam(l).maxdistance = 256 * scale.x;
				}
			}
		}

		A_SoundVolume(CHAN_6, alpha * 0.75);

		Super.Tick();
	}
}

class ExplosionLight : AlertPointLight
{
	override void Tick()
	{
		Super.Tick();

		if (master)
		{
			args[DynamicLight.LIGHT_INTENSITY] = int(master.scale.x * 2048 * master.alpha);
		}
		else
		{
			args[DynamicLight.LIGHT_INTENSITY]--;
		}

		if (args[DynamicLight.LIGHT_INTENSITY] <= 0) { Destroy(); }
	}
}

class ExplosionSphere : Actor
{
	Actor light;
	Array<Actor> sparks;

	Default
	{
		+NOGRAVITY
		+BRIGHT
		RenderStyle "AddStencil";
		StencilColor "BBBBFF";
		Scale 0.01;
		Alpha 0.7;
	}

	States
	{
		Spawn:
			MDLA A 1;
			Loop;
	}

	override void PostBeginPlay()
	{
		light = Spawn("ExplosionLight", pos);
		light.args[DynamicLight.LIGHT_RED] = 0xBB;
		light.args[DynamicLight.LIGHT_GREEN] = 0xBB;
		light.args[DynamicLight.LIGHT_BLUE] = 0xFF;
		light.master = self;

		for (int i = 1; i <= 6; i++)
		{
			Class<Actor> sparkclass = "SparkFlare_W" .. i;

			Actor spark;

			for (int j = 0; j < 32; j++)
			{
				spark = Spawn(sparkclass, pos);

				if (spark)
				{
					spark.A_SetRenderStyle(alpha, STYLE_AddShaded);
					spark.SetShade(fillcolor);
					spark.bMissile = true;
					spark.A_SetTics(Random(30, 280));
					spark.scale *= FRandom(0.125, 0.5);
					spark.alpha *= FRandom(0.25, 1.0);
					spark.speed = FRandom(1, 32);
					spark.angle = FRandom(0, 359);
					spark.pitch = FRandom(-30, 0);

					spark.Vel3DFromAngle(spark.speed, spark.angle, spark.pitch);

					sparks.push(spark);
				}
			}
		}
	}

	override void Tick()
	{
		if (IsFrozen()) { return; }

		scale.x = scale.y = (scale.x + 0.2);
		alpha = max(0, alpha - 0.05);

		for (int s = 0; s < sparks.Size(); s++)
		{
			if (!sparks[s]) { sparks.Delete(s); continue; }

			sparks[s].angle += 2;
			sparks[s].pitch -= 0.5;

			sparks[s].Vel3DFromAngle(sparks[s].speed, sparks[s].angle, sparks[s].pitch);
		}

		if (light && alpha == 0.0) { light.master = null; }

		if (!sparks.Size())
		{
			Destroy();
		}

		Super.Tick();
	}
}

class ExplosionCore : Actor
{
	Default
	{
		+NOGRAVITY
		+BRIGHT
		RenderStyle "AddStencil";
		StencilColor "005500";

		Alpha 0.0;
		Scale 10.0;
	}

	States
	{
		Spawn:
			MDLA A 1;
			Loop;
	}

	override void Tick()
	{
		if (IsFrozen()) { return; }

		scale.x = scale.y = (scale.x - 0.4);
		alpha = min(0.7, alpha + 0.005);

		if (scale.x <= 0.0)
		{
			Spawn("ExplosionSphere", pos);
			Destroy();
		}

		Super.Tick();
	}
}

class StaticActor : Actor
{
	bool nostatic;

	Property NoStatic:nostatic;

	Default
	{
		StaticActor.NoStatic false;
	}

	override void Tick()
	{
		Super.Tick();

		// If the actor stops animating (tics of -1) and isn't shootable or alive and moving, then stop ticking the actor.
		if (
			!nostatic &&
			tics == -1 && 
			(
				!bShootable ||
				health <= 0
			) && 
			vel == (0, 0, 0) &&
			(
				bNoGravity ||
				pos.z == floorz
			)
		)
		{
			ChangeStatNum(STAT_FIRST_THINKING - 1);
		}
	}
}

// Actor that does the bare minumum of ticking
// Use for static, non-interactive actors
//
// Derived from bits and pieces of p_mobj.cpp
class SimpleActor : Actor
{
	Vector2 floorxy;
	Vector3 oldpos;

	override void Tick()
	{
		if (IsFrozen()) { return; }

		Vector2 curfloorxy = (curSector.GetXOffset(sector.floor), curSector.GetYOffset(sector.floor)); // Hacky scroll check because MF8_INSCROLLSEC not externalized to ZScript?
		bool dotick = (curfloorxy != floorxy) || curSector.flags & sector.SECF_PUSH || (pos != oldpos);

		if (dotick) // Only run a full Tick once; or if we are on a carrying floor, pushers are enabled in the sector (wind), or if we moved by some external force
		{
			oldpos = pos;
			Super.Tick();
			floorxy = curfloorxy;
			return;
		}

		if (vel != (0, 0, 0)) // Apply velocity as required
		{
			SetXYZ(Vec3Offset(vel.X, vel.Y, vel.Z)); // Vec3Offset is portal-aware; use instead of just pos + vel, which is not
		}

		// Tick through actor states as normal
		if (tics == -1) { return; }
		else if (--tics <= 0)
		{
			SetState(CurState.NextState);
		}
	}
}

class AscherParachuting : Actor
{
	Default
	{
		+NOINTERACTION;
		+NOGRAVITY;
		+FLOATBOB;
		FloatBobStrength 0.25;
		Scale 0.5;
	}

	States
	{
		Spawn:
			ASCP A -1;
			Stop;
	}
}

class MineCartEMoving : ModelBase
{
	Default
	{
		//$Category Models (BoA)/Scenery
		//$Title Mine Cart, Empty (for movement sequence)
		//$Color 3

		+CANPASS
		+DONTTHRUST
		-FLOORCLIP
		+NOBLOOD
		+NOBLOODDECALS
		+NODAMAGE
		+NOGRAVITY
		+NOTAUTOAIMED
		+SHOOTABLE
		+SOLID

		DistanceCheck "scenelod";
		Radius 34;
		Height 24;
		Health -1;
		Speed 0;
	}

	override bool CanCollideWith(Actor other, bool passive)
	{
		double amt = (speed ? speed : vel.length()); // C1M6's ACS rail script sets speed variable to movement speed of cart

		if (amt && other.bShootable && !other.player && !PlayerPawn(other))
		{
			target = other;
			A_DamageTarget(0x7FFFFFFF, "Trample");
			A_StartSound("cartstop", CHAN_VOICE, 0, amt);
		}

		return true;
	}
}