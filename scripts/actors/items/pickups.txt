class SpearOfDestiny : CompassItem
{
	Default
	{
		//$Title Spear of Destiny
		Tag "$TAGSTAFF";
		Scale 0.67;
		+COUNTITEM
		Inventory.Icon "SPEAA0";
		Inventory.PickupMessage "$SPEAROD";
		Inventory.PickupSound "misc/spearofdestiny";
		CompassItem.Alternates "SpearofDestiny_End", "";
	}

	States
	{
		Spawn:
			SPEA B -1;
			Stop;
	}
}

class SpearOfDestiny_End : SpearOfDestiny
{
	Default
	{
		//$Title Spear of Destiny (Final Battle)
		+FLOATBOB
		Radius 48; // Make this easier to pick up
		Scale 2.0; // start scaled up, since it gets dropped from Longinus_Hitler
		CompassItem.Alternates "SpearofDestiny", "";
	}

	States
	{
		Spawn:
			SPEA C -1;
			Stop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		floorclip = -24; // Raise the sprite above the floor, but not the hitbox

		SetOrigin((pos.xy, floorz), false);
	}

	override void Tick()
	{
		Super.Tick();
		
		if (scale.x != 0.67)
		{
			if (scale.x > 0.67) { scale = (scale.x - 0.025) * (1.0, 1.0); }
			else { scale = 0.67 * (1.0, 1.0); }
		}
	}
}

class UniformStand: SwitchableDecoration
{
	class<DisguiseToken> currentuniform;
	property UniformType: currentuniform;
	default
	{
		Radius 8;
		Height 56;
		Scale 0.7;
		-DORMANT
		+NOTAUTOAIMED
		+SOLID
		+USESPECIAL
		Activation THINGSPEC_Switch;
		UniformStand.UniformType "";
	}
	States
	{
	Spawn:
		HNG1 A 0;
		Goto Inactive;
	Inactive:
		"####" "#" 1 NODELAY {bDormant = TRUE;}
		"####" "#" -1 NODELAY ACS_NamedExecuteAlways("BoA_CompassQueue",0);
		Stop;
	PreLoadSprites:
		HNG1 ABCD 0;
		HNG2 ABCD 0;
	}
	
	override void Activate (Actor activator)
	{
		if (activator is "PlayerPawn")
		{
			let disguise = DisguiseToken(activator.FindInventory("DisguiseToken", True));
			if (disguise && disguise.Amount > 0) //KEEPDEPLETED
			{
				bSolid = FALSE;
				if (currentuniform) A_SpawnItemEx(currentuniform, 0, 0, 16, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
				bSolid = TRUE;
				if (disguise is "ScientistUniformToken") { frame = "B"; }
				else if (disguise is "CCBJUniformToken") { frame = "C"; }
				else if (disguise is "SSBJUniformToken") { frame = "D"; }
				else { frame = "A"; }
				currentuniform = disguise.GetClass();
				activator.A_TakeInventory(currentuniform);
			}
			else
			{
				if (currentuniform)
				{
					A_SpawnItemEx(currentuniform, 0, 0, 16, 0, 0, 0, 0, SXF_NOCHECKPOSITION);
					currentuniform = null;
				}
			}
			SetStateLabel("Inactive");
		}
	}
	
	override void Deactivate (Actor deactivator)
	{
		Activate(deactivator);
	}
}
