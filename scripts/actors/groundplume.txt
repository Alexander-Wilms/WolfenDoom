/*
 * Copyright (c) 2020 Talon1024
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
**/

class SoilParticle : SimpleActor
{
	Default
	{
		Scale .25;
		-NOGRAVITY
		+NOINTERACTION
		+ROLLSPRITE
	}

	States
	{
		Spawn:
			SLP1 A 0 NoDelay A_Jump(128, 2);
			SLP1 B 0;
		Flight:
			"####" "#" 5 A_CheckGround;
			Loop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Roll = frandom(0.0, 360.0);
	}

	void A_CheckGround()
	{
		Sector theSector = Level.PointInSector(Pos.XY);
		if (Pos.Z < theSector.floorplane.ZatPoint(Pos.XY))
		{
			Destroy();
		}
	}

	override void Tick()
	{
		Super.Tick();
		// Apply gravity and add roll
		if (!Level.isFrozen())
		{
			Roll += frandom(1.0, 3.0);
			Vel.Z -= GetGravity();
		}
	}
}

class GroundPlumeBase : Actor
{
	Default
	{
		+NOINTERACTION
	}

	void A_SpawnPlume(class<Actor> particleClass, double endradius, double increment = .25, int height = 6, int ring = 8)
	{
		CVar groundPlumeSwitch = CVar.FindCVar("boa_groundplume");
		if(!groundPlumeSwitch.GetBool()) { return; }
		if (increment <= 0.0) { increment = .25; }
		if (endradius < 0.0) { endradius = increment; }
		for (double radius = 0.0; radius < endradius; radius += increment)
		{
			int curRing = ring;
			if (radius == 0.0)
			{
				curRing = 1;
			}
			for (int i = 0; i < height; i++)
			{ // Height is how many particles to spawn vertically
				for (int j = 0; j < ring; j++)
				{ // Ring is how many particles to spawn in a ring horizontally
					double angleFrac = 1.0/ring;
					double angleDiff = 360 * angleFrac; // Angle difference between each ring theta particle
					double angle = angleDiff * j;
					Actor particle = Spawn(particleClass, Pos, ALLOW_REPLACE);
					particle.VelFromAngle(radius, angle + frandom(-angleDiff / 2, angleDiff / 2));
					particle.Vel.Z = ((i + 1) * 3) * cos(60 * (radius / endradius)) + frandom(-1.0, 1.0);
				}
			}
		}
	}
}

class DirtGroundPlume : GroundPlumeBase
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay {
			A_SpawnPlume("SoilParticle", 3, .5);
		}
		Stop;
	}
}