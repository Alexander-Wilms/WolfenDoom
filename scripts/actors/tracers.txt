class BulletTracer : FastProjectile
{
	Class<TracerTrail> trail;
	Actor trailactor;
	int offset;
	int zoffset;
	int flags;

	flagdef NoRicochet: flags, 0;
	flagdef NoInertia: flags, 1;

	Property Trail:trail;

	Default
	{
		+BLOODSPLATTER
		+NOEXTREMEDEATH
		+WINDTHRUST
		+THRUGHOST
		Radius 2;
		Height 2;
		Speed 75;
		FastSpeed 85;
		Decal "BulletChip";
		BulletTracer.Trail "TracerTrail";
		DamageType "Bullet";
	}

	States
	{
		Spawn:
			TNT1 A 1 BRIGHT;
			Loop;
		Death:
		Crash:
			TNT1 AAA 0 {
				if (trailactor) { trailactor.Destroy(); }
				A_SpawnItemEx("TracerSpark", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2), random(0,359)); //T667 improvements
				bWindThrust = false;
			}
			PUFF B 3 BRIGHT LIGHT("BPUFF1") {
				if (!bNoRicochet) { A_StartSound("ricochet"); }
				A_SpawnItemEx("ZBulletChip");
			}
			PUFF CD 3 BRIGHT LIGHT("BPUFF1");
			Stop;
		XDeath:
			TNT1 A 1 {
				bWindThrust = false;
				A_StartSound("hitflesh");
			}
			Stop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		if (!bNoInertia && target)
		{
			vel += target.vel;
		}

		// Spawn the visible tracer *once* at spawn
		trailactor = Spawn(trail, pos);
		if (trailactor)
		{
			trailactor.vel = vel;
			trailactor.A_FaceMovementDirection(0, 0.0, 0.0, FMDF_INTERPOLATE);
			trailactor.master = self;
		}

		offset = Random(0, 70);
	}

	// Handling so that tracers won't hit actors that have the tracer's origin actor set as their master (or inherit from one that does)
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (target && other)
		{
			Actor roottarget = target;
			Actor rootmaster = other;
			while (roottarget.master) { roottarget = roottarget.master; }
			while (rootmaster.master) { rootmaster = rootmaster.master; }

			if (roottarget && roottarget == rootmaster) { return false; }
		}

		return true;
	}

	override void Tick()
	{
		if ((level.time + offset) % 30 == 0) { DoWhizChecks(); }

		Super.Tick();
	}

	void DoWhizChecks(int radius = 96)
	{
		BlockThingsIterator it = BlockThingsIterator.Create(self, radius);

		while (it.Next())
		{
			if (it.thing == target) { continue; } // Ignore the originator

			if (it.thing.health > 0 && it.thing.bShootable && (Nazi(it.thing) || PlayerPawn(it.thing) || PlayerFollower(it.thing)))// Only affect living Nazis, players, and player followers
			{
				double dist = Distance3d(it.thing);

				if (dist > radius) { continue; }

				if (it.thing.lastHeard != self)
				{
					it.thing.lastHeard = self;

					if (target && target.IsHostile(it.thing) && target.species != it.thing.species) // Only 'whizz' at hostiles
					{
						SoundAlert(target, false, 64);
						Actor mo = Spawn("Whizzer", pos);
						if (mo) { mo.master = it.thing; }
					}
				}
			}
		}
	}
}

class ZFlatDecal : SimpleActor
{
    const epsilon = 4;

    bool onCeiling;
    bool randomFlipX,
         randomFlipY;

    Property RandomFlip : randomFlipX, randomFlipY;

    Default
    {
        Height 0;
        Radius 0;

        RenderStyle "Shaded";

        +FLATSPRITE
        +MOVEWITHSECTOR
        +NOBLOCKMAP
        +NOGRAVITY
        +NOTELEPORT
    }

    override void PostBeginPlay()
    {
        Super.PostBeginPlay();

        // Random flip
        scale.x *= randomFlipX ? RandomPick(1, -1) : 1;
        scale.y *= randomFlipY ? RandomPick(1, -1) : 1;

        // Stick to floor/ceiling
        SecPlane plane;
        if (Abs(pos.z - GetZAt()) <= epsilon)
        {
            SetZ(GetZAt());
            plane = curSector.floorPlane;
            onCeiling = false;
        }
        else if (Abs(pos.z - GetZAt(flags:GZF_Ceiling)) <= epsilon)
        {
            SetZ(GetZAt(flags:GZF_Ceiling));
            plane = curSector.ceilingPlane;
            onCeiling = true;
        }
        else
        {
            Destroy();
            return;
        }

        // Tilt to match slopes
        let normal = plane.normal;
        angle = VectorAngle(normal.x, normal.y);

        normal.xy = RotateVector(normal.xy, -angle);
        pitch = -VectorAngle(normal.x, normal.z) + 90;
    }

    override void Tick()
    {
        Super.Tick();

        // MoveWithSector isn't good enough to stick to a rising ceiling
        if (onCeiling)
            SetZ(GetZAt(flags:GZF_Ceiling));
    }
}

class ZBulletChip : ZFlatDecal
{
    Default
    {
        Scale 0.5;
        Alpha 0.85;
        StencilColor "Black";
        ZFlatDecal.RandomFlip true, true;
    }

    States
    {
    Spawn:
        TNT1 A 0 NODELAY
        {
            return curState + Random(1, 5);
        }
        CHIP ABCDE -1;
        Stop;
    }
}

class ZScorch : ZBulletChip
{
    States
    {
    Spawn:
        TNT1 A 0 NODELAY
        {
            return curState + 1;
        }
        ZSCO A -1;
        Stop;
    }
}

class ZScorchLower : ZBulletChip
{
	Default
	{
		Scale 0.5;
	}
	
    States
    {
    Spawn:
        TNT1 A 0 NODELAY
        {
            return curState + Random (1,2);
        }
        ZSCO BC -1;
        Stop;
    }
}

class ZCrater : ZBulletChip
{
	Default
	{
		Scale 0.25;
	}

	States
	{
		Spawn:
			ZSCO # -1;
			Stop;
	}

	override void PostBeginPlay()
	{
		frame = Random(5, 9);

		Super.PostBeginPlay();
	}
}

class ZPlasma : ZBulletChip
{
	Default
	{
		Scale 1.5;
	}
    States
    {
    Spawn:
        TNT1 A 0 NODELAY
        {
            return curState + Random (1,2);
        }
        ZSCO DE -1;
        Stop;
    }
}

class ZFlatDecalKiller : EventHandler
{
    Array<ZFlatDecal> flatDecals;
    int back;

    override void WorldThingSpawned(WorldEvent e)
    {
        if (!ZFlatDecal(e.thing)) return;

        int maxFlatDecals = CVar.FindCVar('zwl_maxflatdecals').GetInt();
        if (flatDecals.Size() < maxFlatDecals)
        {
            flatDecals.Push(ZFlatDecal(e.thing));
        }
        else
        {
            if (flatDecals[back])
                flatDecals[back].Destroy();

            flatDecals[back] = ZFlatDecal(e.thing);
        }

        back = (back + 1) % maxFlatDecals;
    }

    override void WorldTick()
    {
        int maxFlatDecals = CVar.FindCVar('zwl_maxflatdecals').GetInt();
        if (flatDecals.Size() > maxFlatDecals)
        {
            Array<ZFlatDecal> newFlatDecals;

            int excess = flatDecals.Size() - maxFlatDecals;

            for (int i = 0; i < flatDecals.Size(); ++i)
            {
                if (i < excess)
                    flatDecals[back].Destroy();
                else
                    newFlatDecals.Push(flatDecals[back]);

                // Back is just a convenient counter; it isn't being used as the back of the queue, here
                back = (back + 1) % flatDecals.Size();
            }

            back = 0;
            flatDecals.Move(newFlatDecals);
        }
    }
}

class Whizzer : GrenadeBase
{
	Default
	{
		+NOGRAVITY
		+NOINTERACTION
		GrenadeBase.FearDistance 32;
	}

	States
	{
		Spawn:
			TNT1 A 15;
			Stop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		if (master && PlayerPawn(master)) { A_StartSound("whiz"); } // Only play whiz sound if near a player that's not the originator
	}
}

class TracerTrail : Actor
{
	double faderate, stepalpha, startalpha, oldpitch;

	Property FadeRate:faderate;
	Property StartAlpha:startalpha;

	Default
	{
		+BRIGHT
		+CANNOTPUSH
		+DONTSPLASH
		+FORCEXYBILLBOARD
		+MISSILE //mxd
		+NOBLOCKMAP
		+NOINTERACTION
		+NODAMAGETHRUST
		+NOGRAVITY
		+NOTELEPORT
		+WINDTHRUST
		Alpha 0.0;
		Scale 0.4;
		RenderStyle "Add";
		TracerTrail.FadeRate 0.01;
		TracerTrail.StartAlpha 0.75;
	}
	States
	{
		Spawn:
			PUFF A 1 DoFade();
			Loop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
	}

	override void Tick()
	{
		oldpitch = pitch;

		Super.Tick();

		if (bNoInteraction && TestMobjLocation()) { bNoInteraction  = false; }

		if (!master || !vel.xy.length()) { Destroy(); }
	}

	void DoFade()
	{
		if (stepalpha < startalpha)
		{ // Quickly fade in from nothing at the very beginning...  This hides situations where the tracer would spawn and flash right in front of the player for a tick.
			alpha += 0.25;
			if (alpha > startalpha) { alpha = startalpha; }

			stepalpha = alpha;
		}
		else if (faderate) { A_FadeOut(faderate); } // Fade out to nothing at the specified rate
	}
}

class TracerSpark : Actor
{
	Default
	{
		+DONTSPLASH
		+FLOORCLIP
		+FORCEXYBILLBOARD
		+MISSILE
		+NOTELEPORT
		+WINDTHRUST
		Health 4;
		Radius 3;
		Height 6;
		Gravity .1;
		Speed .1;
		RenderStyle "Add";
		Scale .3;
		Mass 0;
		BounceType "Doom";
	}

	States
	{
		Spawn:
			PUFF A 1;
			"####" AEFGHI 2 BRIGHT A_SetTranslucent(.8,1);
			"####" J 1 BRIGHT A_SetTranslucent(.8,1);
			"####" K 1 BRIGHT A_SetTranslucent(.7,1);
			"####" K 1 BRIGHT A_SetTranslucent(.6,1);
			"####" K 1 BRIGHT A_SetTranslucent(.5,1);
			"####" K 1 BRIGHT A_SetTranslucent(.4,1);
			"####" K 1 BRIGHT A_SetTranslucent(.3,1);
			"####" K 1 BRIGHT A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
	}
}

class TracerSpark_Longlive : TracerSpark
{

	Default
	{
		+BRIGHT
		Gravity .2;
	}

	States
	{
		Spawn:
			PUFF A 0 NODELAY A_Jump(256, "Fade1", "Fade2", "Fade3", "Fade4");
			Loop;
		Fade1:
			"####" AEFGHI 5 A_SetTranslucent(.8,1);
			"####" J 2 A_SetTranslucent(.8,1);
			"####" K 2 A_SetTranslucent(.7,1);
			"####" K 2 A_SetTranslucent(.6,1);
			"####" K 2 A_SetTranslucent(.5,1);
			"####" K 2 A_SetTranslucent(.4,1);
			"####" K 2 A_SetTranslucent(.3,1);
			"####" K 2 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
		Fade2:
			"####" AEFGHI 6 A_SetTranslucent(.8,1);
			"####" J 3 A_SetTranslucent(.8,1);
			"####" K 3 A_SetTranslucent(.7,1);
			"####" K 3 A_SetTranslucent(.6,1);
			"####" K 3 A_SetTranslucent(.5,1);
			"####" K 3 A_SetTranslucent(.4,1);
			"####" K 3 A_SetTranslucent(.3,1);
			"####" K 3 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
		Fade3:
			"####" AEFGHI 4 A_SetTranslucent(.8,1);
			"####" J 4 A_SetTranslucent(.8,1);
			"####" K 4 A_SetTranslucent(.7,1);
			"####" K 4 A_SetTranslucent(.6,1);
			"####" K 4 A_SetTranslucent(.5,1);
			"####" K 4 A_SetTranslucent(.4,1);
			"####" K 4 A_SetTranslucent(.3,1);
			"####" K 4 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
		Fade4:
			"####" AEFGHI 7 A_SetTranslucent(.8,1);
			"####" J 2 A_SetTranslucent(.8,1);
			"####" K 2 A_SetTranslucent(.7,1);
			"####" K 2 A_SetTranslucent(.6,1);
			"####" K 2 A_SetTranslucent(.5,1);
			"####" K 2 A_SetTranslucent(.4,1);
			"####" K 2 A_SetTranslucent(.3,1);
			"####" K 2 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
	}
}

class PlayerTracer : BulletTracer
{
	Default
	{
		Species "PlayerFollower"; // By default, player bullets have PlayerFollower species
		-NOGRAVITY
	}

	override void PostBeginPlay()
	{
		if (target && target is "PlayerFollower" && target.bFriendly) { // If the shooter is a friendly PlayerFollower...
			A_SetSpecies("Player");  // ...they can always shoot through players
			bThruSpecies = True;
		} else if (!multiplayer && skill < 2) { // Otherwise, if it's a regular player, not in coop (or dm, hypothetically), and at lowest two skills...
			bThruSpecies = True; // ...player shots go through PlayerFollower species, as defined in Default block
		}

		Super.PostBeginPlay();
	}

	override void Tick()
	{
		Super.Tick();

		if (isFrozen()) { return; }

		if (zoffset < 8) // Rise up 8 units to match the crosshair height
		{
			zoffset = 8;
			SetOrigin(pos + (0, 0, zoffset), true);
			if (trailactor) { trailactor.SetOrigin(trailactor.pos + (0, 0, zoffset), true); }
		}

		if (pos.z > floorz && !bNoGravity)
		{
			vel.z -= 15.0 / Speed;
			if (trailactor) { trailactor.vel = vel; }
		}
	}
}

class KTurretTracer : PlayerTracer
{
	Default
	{
		Speed 200.0;
		BulletTracer.Trail "KTurretTrail";
	}

	override void PostBeginPlay()
	{
		SetDamage(Random(10, 30));

		Super.PostBeginPlay();
	}
}

class KTurretTrail : TracerTrail
{
	Default
	{
		Alpha 1.0; // Start out at full alpha
	}
}

class KTFlare : ActorPositionable
{
	Default
	{
		+NOGRAVITY
		+ROLLSPRITE
		+FORCEXYBILLBOARD
		Scale 0.25;
		Alpha 0.5;
		RenderStyle "Add";
	}

	States
	{
		Spawn:
			FLAR B 1 Bright Light("3dFlare") A_FadeOut(0.075);
			Loop;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		roll += Random(0, 360);
	}

	override void Tick()
	{
		Actor.Tick();

		RotateWithMaster(ROT_MatchAngle);
	}
}