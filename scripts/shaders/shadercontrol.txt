class ShakeShaderControl : ShaderControl {
	Default {
		ShaderControl.Shader "shakeshader";
	}

	clearscope double FixedToDouble(int fixed) {
		return fixed / 65536.0;
	}

	override void SetUniforms(PlayerInfo p, RenderEvent e) {
		double speed = FixedToDouble(amount - 2);
		speed = speed / 4; // Make shake effect weaker
		Shader.SetUniform1f(p, ShaderToControl, "speed", speed);
	}
}

class OldVideoShaderControl : ShaderControl {
	Default {
		ShaderControl.Shader "oldvideoshader";
	}
}

class BlurShaderControl : ShaderControl {
	int holdTarget;

	Default {
		ShaderControl.Shader "blurshader";
	}

	override void BeginPlay()
	{
		alpha = 0;

		Super.BeginPlay();
	}

	override void DoEffect()
	{
		if (amount > 1) { holdTarget = level.time + amount; } // Set hold time based on amount in inventory

		// If we've hit the hold time or are a tank remove the effect
		if (owner is "ShermanPlayer" || (holdTarget && level.time > holdTarget)) 
		{
			amount = 1;
			holdTarget = 0;
			alpha = 0;
		}
		else if (holdTarget)
		{
			alpha = alpha < 1.0 ? alpha + 0.057 : 1.0; // Fade the blur effect in over the course of roughly half a second
			amount--; // Remove one from inventory every tick
		}
	}
}

class HeatShaderControl : ShaderControl
{
	int holdTarget;

	Default
	{
		ShaderControl.Shader "heatshader";
	}

	override void DoEffect()
	{
		if (amount > 1) { holdTarget = level.time + amount; } // Set hold time based on amount in inventory

		// If we've hit the hold time, are a tank, or are underwater, remove the effect
		if (owner.waterlevel > 1 || owner is "ShermanPlayer" || (holdTarget && level.time > holdTarget)) 
		{
			amount = 1;
			holdTarget = 0;
		}
		else if (holdTarget)
		{
			amount = max(amount - 4, 1); // This effect drops off quickly, unlike blur!
		}
	}
}

class SandShaderControl : ShaderControl
{
	Vector2 dir;
	Vector3 clr;
	Color setcolor;
	double setangle;
	int holdTarget;
	double size;
	int maxparticles;
	EffectsManager manager;

	Property ParticleColor:setcolor;
	Property Angle:setangle;
	Property Size:size;
	Property MaxParticles:maxparticles;

	Default
	{
		Alpha 0.0;
		Speed 3.0;
		SandShaderControl.Angle 0.0;
		ShaderControl.Shader "sandshader";
		SandShaderControl.ParticleColor "746251";
		SandShaderControl.Size 4;
		SandShaderControl.MaxParticles 64;
	}

	override void PostBeginPlay()
	{
		Super.PostBeginPlay();

		if (!owner || !owner.player || !owner.player.camera) { Destroy(); return; }

		SpawnPoint = owner.player.camera.pos;

		clr = (setcolor.r, setcolor.g, setcolor.b) / 256.0;

		manager = EffectsManager.GetManager();
	}

	override void SetUniforms(PlayerInfo p, RenderEvent e)
	{
		Vector3 campos = owner.player.camera.pos + (0, 0, owner.player.crouchviewdelta) - SpawnPoint;
		campos.xy = RotateVector(campos.xy, -angle);

		Shader.SetUniform1f(p, ShaderToControl, "timer", speed * (gametic + e.FracTic));
		Shader.SetUniform1f(p, ShaderToControl, "angle", e.viewangle - setangle);
		Shader.SetUniform1f(p, ShaderToControl, "pitch", e.viewpitch);
		Shader.SetUniform1f(p, ShaderToControl, "fov", owner.player.FOV);
		Shader.SetUniform1f(p, ShaderToControl, "bob", owner.player.bob / 64);
		Shader.SetUniform3f(p, ShaderToControl, "position", campos);
		Shader.SetUniform3f(p, ShaderToControl, "particlecolor", clr);
		Shader.SetUniform1f(p, ShaderToControl, "size", size);
		Shader.SetUniform1f(p, ShaderToControl, "maxparticles", maxparticles);
	}

	override void DoEffect()
	{
		if (amount > 1) { holdTarget = level.time + amount; } // Set hold time based on amount in inventory

		// If we've hit the hold time or are underwater, remove the effect
		if (owner.waterlevel > 1 || (holdTarget && level.time > holdTarget)) 
		{
			amount = 1;
			holdTarget = 0;
			alpha = 0;
		}
		else if (holdTarget)
		{
			if (manager)
			{
				maxparticles = int(Default.maxparticles * manager.particlescaling);
			}

			double targetalpha = clamp((amount - 1) / 105.0, 0, 1.0);
			if (alpha < targetalpha) { alpha = min(targetalpha, alpha + 0.05); }
			else if (alpha > targetalpha) { alpha = max(targetalpha, alpha - 0.05); }

			amount = max(amount - 4, 1);
		}
	}
}